#### 
Autor: Raique
Atualização: esporadicamente ainda adiciono algumas coisas, visto que estou priorizando alguns outros programinhas :p
######


### SOBRE IPFORWARD file ####
# Visto que um ataque fora da LAN sera necesario o ipforward, um script foi disponibilizado, escrito em bash.
1-> de permissão de executavel a ele: chmod +x ipforward
2-> e execute-o: sudo ./ipforward (se voce estiver no mesmo diretorio que ele) ou sudo /diretorio/ipforward (se você não
estiver no mesmo diretorio que o script)

OPCIONAL 1-> crie em seu diretorio '~' um arquivo com o nome: .bash_aliases
         2 > Dentro do arquivo, escreva: alias ipf="sudo ~/ipforward"
         @@@isso vai fazer com que voce o execute-o de qualquer path, ja com privilegios sudo, sem tem que ficar indo ao diretorio do 
          arquivo toda vez que necessitar/desejar executa-lo.
####################################################################
# Sobre o cliente_rvshell.py
1-> quando em teste, usar-lo como padrao, em casos de ataques reais, mudar a extensão '.py' para '.pyw', fazendo com que o binario python reconheça que o prompt não deve ser executado.

2-> uma versão em .exe é possivel utilizando a biblioteca python cx_Freeze, gerando um executavel python a partir do script python. Plataforma dependente.

3-> atualizações serão feitas esporadicamente, o server.py deve ser usado juntamente como o cliente_rvshell.py, uma vez que ambos em combinação é possivel aproveitar todos os recursos do exploit.

5-> para que o target machine (windows) execute o programa sempre que iniciar/reiniciar, mova-o para a pasta: "C:\Users\Username\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup",
caso admin: "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp"

4-> trabalhando em uma versao com privillege escalation.



# sobre o server.py

1-> a partir da conexão realizada com sucesso, escreva "h" sem aspas, ira disponibilizar o help, contendo algumas funções interessantes do exploit, dos comandos possiveis, como screenshot, pops up internet na target machine...

2-> mais coisas serao adicionadas em breve


# wintroj.cpp

1-> compilar com: g++ -o seuarquivo.exe wintroj.cpp -l ws2_32 --machine=windows

2-> compilção acima é caso você ja esteja dentro da maquina windows, para cross-compiling(i.e., compilar um programa para windows, estando na maquina linux, por exemplo.) use:

32 bit target machine:
1686-w64-mingw32-g++ -o exemplo.exe wintroj.cpp -l ws2_32 --machine=windows

64 bit target machine:
w86_64-w64-mingw32-g++ -o exemplo.exe wintroj.cpp -l ws2_32 --machine=windows


3-> versão bem raw, estou trabalhando em outro, talvez mais para frente adiciono mais coisa para ele

4-> recomendado que o servidor no qual ele faça conexão seja o netcat, uma vez que o netcat é muito simples e de alta qualidade

# trojan.cpp (versão linux)

1-> compilação simples: g++ -o exemplo wintroj.cpp

2-> usar juntamente com o netcat vai te dar total controle sobre o terminal do target, uma vez que o terminal do linux é a parte mais poderosa do OS



valeu!

não me responsabilizo por nada.

toda ajuda ou melhora é bem vinda, uma vez que tem muita galera com ideias melhores e mais sofisticadas!
